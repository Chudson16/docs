# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, OpenDroneMap
# This file is distributed under the same license as the OpenDroneMap package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OpenDroneMap 0.9.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-21 15:22-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorials.rst:5
# bc698022fce2477a868dc1bdb2dbdb68
msgid "Tutorials"
msgstr ""

#: ../../tutorials.rst:7
# ba5704b6cb914283ba1495d2ac04afa6
msgid "Below you will find instructions for some common use cases."
msgstr ""

#: ../../tutorials.rst:11
# c2417f8c2cbe4e189006241551cb8996
msgid "Creating High Quality Orthophotos"
msgstr ""

#: ../../tutorials.rst:17
# 218503b4915a4ee1befe8c8b89cd5405
msgid "Without any parameter tweaks, ODM chooses a good compromise between quality, speed and memory usage. If you want to get higher quality results, you need to tweak some parameters:"
msgstr ""

#: ../../tutorials.rst:19
# 1a9ffb6306ff4d81a89046d57157cf28
msgid "``--orthophoto-resolution`` is the resolution of the orthophoto in cm/pixel. Decrease this value for a higher resolution result."
msgstr ""

#: ../../tutorials.rst:20
# fc65d016079d423cb45ad6737ff473b6
msgid "``--ignore-gsd`` is a flag that instructs ODM to skip certain memory and speed optimizations that directly affect the orthophoto. Using this flag will increase runtime and memory usage, but may produce sharper results."
msgstr ""

#: ../../tutorials.rst:21
# 056becd1b8db45b4b5811d627239ac9d
msgid "``--texturing-nadir-weight`` should be increased to ``29-32`` in urban areas to reconstruct better edges of roofs. It should be decreased to ``0-6`` in grassy / flat areas."
msgstr ""

#: ../../tutorials.rst:22
# 449f93fbcb0d476cb4a20e14915ccd4f
msgid "``--texturing-data-term`` should be set to `area` in forest areas."
msgstr ""

#: ../../tutorials.rst:23
# 1d8b8713ab234e038a95e98282cdf736
msgid "``--mesh-size`` should be increased to `300000-600000` and `--mesh-octree-depth`` should be increased to `10-11` in urban areas to recreate better buildings / roofs."
msgstr ""

#: ../../tutorials.rst:27
# dd4ced14a7704cfa9d864262ed835ec6
msgid "Calibrating the Camera"
msgstr ""

#: ../../tutorials.rst:29
# 0fda85dfb5eb4d77839d54ecacada34c
msgid "Camera calibration is a special challenge with commodity cameras. Temperature changes, vibrations, focus, and other factors can affect the derived parameters with substantial effects on resulting data. Automatic or self calibration is possible and desirable with drone flights, but depending on the flight pattern, automatic calibration may not remove all distortion from the resulting products. James and Robson (2014) in their paper `Mitigating systematic error in topographic models derived from UAV and ground‐based image networks <https://onlinelibrary.wiley.com/doi/full/10.1002/esp.3609>`_ address how to minimize the distortion from self-calibration."
msgstr ""

#: ../../tutorials.rst:35
# c0abbba373ac420ab578b0a8419618f2
msgid "*Bowling effect on point cloud over 13,000+ image dataset collected by World Bank Tanzania over the flood prone Msimbasi Basin, Dar es Salaam, Tanzania.*"
msgstr ""

#: ../../tutorials.rst:37
# 887b8963a3084953a76683f9b84ecb46
msgid "To mitigate this effect, there are a few options but the simplest are as follows: fly two patterns separated by 20°, and rather than having a nadir (straight down pointing) camera, use one that tilts forward by 5°."
msgstr ""

#: ../../tutorials.rst:45
# ad6c12adcc97493eb963d2f15cc50776
msgid "As this approach to flying can be take longer than typical flights, a pilot or team can fly a small area using the above approach. OpenDroneMap will generate a calibration file called cameras.json that then can be imported to be used to calibrate another flight that is more efficiently flown."
msgstr ""

#: ../../tutorials.rst:47
# c3d183e004224c7183034999c05b184a
msgid "Alternatively, the following experimental method can be applied: fly with much lower overlap, but two *crossgrid* flights (sometimes called crosshatch) separated by 20° with a 5° forward facing camera."
msgstr ""

#: ../../tutorials.rst:49
# 5968ac88fb8248048f97f113b09640b9
msgid "Crossgrid overlap percentages can be lower than parallel flights. To get good 3D results, you will require 68% overlap and sidelap for an equivalent 83% overlap and sidelap."
msgstr ""

#: ../../tutorials.rst:50
# 4b6067e6593d46c49eddf54b48bf7017
msgid "To get good 2D and 2.5D (digital elevation model) results, you will require 42% overlap and sidelap for an equivalent 70% overlap and sidelap."
msgstr ""

#: ../../tutorials.rst:56
# c99ce80c15f740a894cd98f2f9fdefaf
msgid "Vertically separated flight lines also improve accuracy, but less so than a camera that is forward facing by 5°."
msgstr ""

#: ../../tutorials.rst:62
# b658c7baac074e03b291f5650ac7a750
msgid "From James and Robson (2014), `CC BY 4.0 <https://creativecommons.org/licenses/by/4.0>`_"
msgstr ""

#: ../../tutorials.rst:66
# 67b39b5853c2488dbf9bc08c46c85b1b
msgid "Creating Digital Elevation Models"
msgstr ""

#: ../../tutorials.rst:68
# 30464d780bd745a2bb68edd962f59f69
msgid "By default ODM does not create DEMs. To create a digital terrain model, make sure to pass the ``--dtm`` flag. To create a digital surface model, be sure to pass the ``--dsm`` flag."
msgstr ""

#: ../../tutorials.rst:74
# 993e1f1f28524ffa97708c7f365deb75
msgid "For DTM generation, a Simple Morphological Filter (smrf) is used to classify points in ground vs. non-ground and only the ground points are used. The ``smrf`` filter can be controlled via several parameters:"
msgstr ""

#: ../../tutorials.rst:76
# e712b7ceaa8344d9a440fbde86c7ecc5
msgid "``--smrf-scalar`` scaling value. Increase this parameter for terrains with lots of height variation."
msgstr ""

#: ../../tutorials.rst:77
# 22694f832b3f4524bcbe3c604bea565c
msgid "``--smrf-slope`` slope parameter, which is a measure of \"slope tolerance\". Increase this parameter for terrains with lots of height variation. Should be set to something higher than 0.1 and not higher than 1.2."
msgstr ""

#: ../../tutorials.rst:78
# 18318080dde04b34ac00de1a65520096
msgid "``--smrf-threshold`` elevation threshold. Set this parameter to the minimum height (in meters) that you expect non-ground objects to be."
msgstr ""

#: ../../tutorials.rst:79
# 3e48c857db424489a6ccbbb03b530a1a
msgid "``--smrf-window`` window radius parameter (in meters) that corresponds to the size of the largest feature (building, trees, etc.) to be removed. Should be set to a value higher than 10."
msgstr ""

#: ../../tutorials.rst:81
# 490c3514c0e04bf195470faeb46816d0
msgid "Changing these options can affect the result of DTMs significantly. The best source to read to understand how the parameters affect the output is to read the original paper `An improved simple morphological filter for the terrain classification of airborne LIDAR data <https://www.researchgate.net/publication/258333806_An_Improved_Simple_Morphological_Filter_for_the_Terrain_Classification_of_Airborne_LIDAR_Data>`_ (PDF freely available)."
msgstr ""

#: ../../tutorials.rst:83
# ee7dfad49a004b618581ff1d15ec20b5
msgid "Overall the ``--smrf-threshold`` option has the biggest impact on results."
msgstr ""

#: ../../tutorials.rst:85
# 37e937eac4554466884a177efb819d3f
msgid "SMRF is good at avoiding Type I errors (small number of ground points mistakenly classified as non-ground) but only \"acceptable\" at avoiding Type II errors (large number non-ground points mistakenly classified as ground). This needs to be taken in consideration when generating DTMs that are meant to be used visually, since objects mistaken for ground look like artifacts in the final DTM."
msgstr ""

#: ../../tutorials.rst:91
# bb740913c61b49ada8e2dee3d9b46634
msgid "Two other important parameters affect DEM generation:"
msgstr ""

#: ../../tutorials.rst:93
# ef96f4a95b444dc2910315c3e339c146
msgid "``--dem-resolution`` which sets the output resolution of the DEM raster (cm/pixel)"
msgstr ""

#: ../../tutorials.rst:94
# 328aad2dd33c43ef9b4dde4986b87809
msgid "``--dem-gapfill-steps`` which determines the number of progressive DEM layers to use. For urban scenes increasing this value to `4-5` can help produce better interpolation results in the areas that are left empty by the SMRF filter."
msgstr ""

#: ../../tutorials.rst:96
# 4e780ffcb3aa45cc87b149d8b6344727
msgid "Example of how to generate a DTM::"
msgstr ""

#: ../../tutorials.rst:102
# 7cbf9c7abbfa4a36b51eac11b7031f45
msgid "Using Docker"
msgstr ""

#: ../../tutorials.rst:104
# 1af9725448554dcb9b62bc02541f50e7
msgid "Since many users employ docker to deploy OpenDroneMap, it can be useful to understand some basic commands in order to interrogate the docker instances when things go wrong, or we are curious about what is happening. Docker is a containerized environment intended, among other things, to make it easier to deploy software independent of the local environment. In this way, it is similar to virtual machines."
msgstr ""

#: ../../tutorials.rst:106
# 846595b2f29f49de804abcb80b394fb7
msgid "A few simple commands can make our docker experience much better."
msgstr ""

#: ../../tutorials.rst:109
# 99a5f474293248df8ef20bde190ebecd
msgid "Listing Docker Machines"
msgstr ""

#: ../../tutorials.rst:111
# bffb62c08a8e4c43a7d6f3b2a843f24d
msgid "We can start by listing available docker machines on the current machine we are running as follows:"
msgstr ""

#: ../../tutorials.rst:120
# 29a8c4988c6347ca8d0e6d80aa923db1
msgid "If we want to see machines that may not be running but still exist, we can add the `-a` flag:"
msgstr ""

#: ../../tutorials.rst:133
# d6c5607cb49e4887b1a1118763742769
msgid "Accessing logs on the instance"
msgstr ""

#: ../../tutorials.rst:135
# a8a0057b6b364c538f5121ee79a4a9ca
msgid "Using either the `CONTAINER ID` or the name, we can access any logs available on the machine as follows:"
msgstr ""

#: ../../tutorials.rst:141
# f47e20d6cb604ae58be1ae76fa7495a1
msgid "This is likely to be unwieldy large, but we can use a pipe `|` character and other tools to extract just what we need from the logs. For example we can move through the log slowly using the `more` command:"
msgstr ""

#: ../../tutorials.rst:157
# 5d2c69fc48e7447c997c3002b90892c3
msgid "Pressing `Enter` or `Space`, arrow keys or `Page Up` or `Page Down` keys will now help us navigate through the logs. The lower case letter `Q` will let us escape back to the command line."
msgstr ""

#: ../../tutorials.rst:159
# 919abfa022b342e78f3ffe634d4f985f
msgid "We can also extract just the end of the logs using the `tail` commmand as follows:"
msgstr ""

#: ../../tutorials.rst:170
# eb416b778fe34b7aa2a0a6fbd947d940
msgid "The value `-5` tells the tail command to give us just the last 5 lines of the logs."
msgstr ""

#: ../../tutorials.rst:173
# c91bbc1e32364acab1f6cede662ff93a
msgid "Command line access to instances"
msgstr ""

#: ../../tutorials.rst:175
# 8f657feeb46c4027ab35c80612e3bfdf
msgid "Sometimes we need to go a little deeper in our exploration of the process for OpenDroneMap. For this, we can get direct command line access to the machines. For this, we can use `docker exec` to execute a `bash` command line shell in the machine of interest as follows:"
msgstr ""

#: ../../tutorials.rst:179
# 419edee5e5304dc2b84bf9b6b820ff01
msgid "::"
msgstr ""

#: ../../tutorials.rst:178
# d3967410b2084b3d91ddee9ed9a8ad25
msgid "> docker exec -ti 2518817537ce bash root@2518817537ce:/code#"
msgstr ""

#: ../../tutorials.rst:181
# 1ad64d2173e44dcb8fe59f0cf38a67ff
msgid "Now we are logged into our docker instance and can explore the machine."
msgstr ""

#: ../../tutorials.rst:184
# 1e06fc927fa64fee9fc90cf54f4b380e
msgid "Cleaning up after Docker"
msgstr ""

#: ../../tutorials.rst:186
# cbb8a0fe36c743bab8593547e84eabaf
msgid "Docker has a lamentable use of space and by default does not clean up excess data and machines when processes are complete. This can be advantageous if we need to access a process that has since terminated, but carries the burden of using increasing amounts of storage over time. Maciej Łebkowski has an `excellent overview of how to manage excess disk usage in docker <https://lebkowski.name/docker-volumes/>`_."
msgstr ""

#: ../../tutorials.rst:190
# 13a77fa054684acca90d066ba45e6798
msgid "Using ODM from low-bandwidth location"
msgstr ""

#: ../../tutorials.rst:193
# da902666a127490898ebec7f355bcd6c
msgid "What is this and who is it for?"
msgstr ""

#: ../../tutorials.rst:195
# 81668b4110b7487d90554d7de58ddf97
msgid "Via Ivan Gayton's: [repo](https://github.com/ivangayton/GDAL_scripts/)"
msgstr ""

#: ../../tutorials.rst:197
# 1da57f70e1f94ab78c25794679a8b9a0
msgid "`OpenDroneMap <https://www.opendronemap.org/>`__ can’t always be effectively set up locally—it takes a fairly powerful machine to process large datasets—so a cloud machine can sometimes be the answer for people in the field. However, bandwidth is a problem in many low-income settings. This constraint can’t be solved completely, but the following method does a reasonable job of reducing the bandwidth needed to process drone imagery datasets on the cloud from African locations."
msgstr ""

#: ../../tutorials.rst:205
# 8548ad3cf6134f578528c1a7d7bd8224
msgid "Here we present a tricky but workable process to create an OpenDroneMap cloud machine (*not* CloudODM, mind you, just a cloud-based instance of ODM that you run from the command line) and use it to remotely process large photo sets. It requires familiarity with Unix command line use, ssh, a Digital Ocean account (Amazon AWS would work as well, possibly with slight differences in the setup), and a moderate level of general computer literacy. If you aren’t fairly computer-savvy and willing to fuss with a slightly tricky setup, `CloudODM <https://www.opendronemap.org/cloudodm/>`__ is what you should be looking at."
msgstr ""

#: ../../tutorials.rst:216
# 81099e4fa5954fd6b4f44fb5c54b1dba
msgid "The whole process is mostly targeted at someone flying substantial missions in an African or similar location looking to process data ASAP while still in a field setting. Therefore it emphasizes a workflow intended to reduce bandwidth/data transfer, rather than just the simplest way of running ODM."
msgstr ""

#: ../../tutorials.rst:223
# 73a86b7b29964478b12e187684cf79d9
msgid "Steps"
msgstr ""

#: ../../tutorials.rst:226
# 643f3ad3ae8a4ea0bc2348e7d2ac5460
msgid "Install"
msgstr ""

#: ../../tutorials.rst:228
# 8b648ae1501f4e0b9c4db5f81e7fb222
msgid "Create a Digital Ocean droplet with at least 4GB of RAM. That’ll cost about $20/month. Less than 4GB of RAM and the install will probably fail. When we actually run the ODM process we’ll resize it to a much larger—and more expensive—cloud machine, but between runs you can downsize it between runs to the second-cheapest droplet which costs only $10/month (the cheapest droplet, at $5/month, comes with such a small drive that you can’t downsize back to it)."
msgstr ""

#: ../../tutorials.rst:236
# 15af1dfd05cd4e06b02371f70d8f706a
msgid "Should be an Ubuntu 16.04 instance to ensure dependency compatibility"
msgstr ""

#: ../../tutorials.rst:238
# bfc1d4955ef94deca03a09bf0919e9b6
msgid "Create a user with sudo privileges. `Digital Ocean’s insanely good documentation <https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04>`__ can help you figure this out. In our case we set up a user called ``odm``, so connecting to it is via the command ``ssh odm@xxx.xxx.xxx.xxx`` (where the x’s stand for the IPv4 address of your server). If you want to follow this example closely, *do* use the username ``odm``; then your install path will be ``/home/odm/ODM/`` and will match all of the examples in this document. -When you log into the server, it will offer you the option to upgrade to Ubuntu 18.04, a more recent version. Don’t. ODM native install doesn’t work smoothly on 18.04. Go ahead and execute ``sudo apt update`` and ``sudo apt upgrade`` to ensure your server isn’t dangerously without updates, but stay with Ubuntu 16.04."
msgstr ""

#: ../../tutorials.rst:253
# bc99668a3415447db6852372400a37b6
msgid "Download and install ODM on it from the `ODM Github <https://github.com/OpenDroneMap/ODM>`__ (regular, not WebODM) with the following commands:"
msgstr ""

#: ../../tutorials.rst:263
# 4004a63e7cf44a678a2daea9a74c6d50
msgid "If you do this from the default home folder of your user (i.e. ``odm``) the path to the install will be ``/home/odm/ODM`` (abbreviated as ``~/ODM/``)."
msgstr ""

#: ../../tutorials.rst:266
# 3eae7e46f41f4caf91a135630ab5ce15
msgid "There are some environmental variables that need to be set. Open the ~/.bashrc file on your machine and add the following 3 lines at the end (From `the ODM github <https://github.com/OpenDroneMap/ODM>`__). The file can be opened with ``nano ~/.bashrc`` (or whatever text editor you use in lieu of nano). Be sure to replace ``/home/odm/`` with the correct path to the location where you extracted OpenDroneMap if you didn’t do everything exactly as in our example (for example if you used a different username in your server setup):"
msgstr ""

#: ../../tutorials.rst:281
# d291f6c8c4124aefbab0517954756af3
msgid "Note that the ODM github readme contains a slight error, the install directory name will be ODM, not OpenDroneMap (you’ll see this if you compare the above instructions to the ones on the ODM GitHub)."
msgstr ""

#: ../../tutorials.rst:285
# ff36705476814c05b0f1c0593d3c53d8
msgid "In order to prevent a crash wherein the split-merge process fails to locate its own executable, we add the following lines to ``~/.bashrc`` (adjust paths if you’ve set things up differently from our example):"
msgstr ""

#: ../../tutorials.rst:295
# 4eaba97903ec46598d0211f963583d66
msgid "Now you’ll need a second cloud hard drive (a “Volume” in Digital Ocean jargon) big enough to manage your project. Rule of thumb seems to be 10 times the size of your raw image set; we’ve got a 100GB image set and set up a 1000GB volume (once the run is done you should be able to get rid of most of this expensive drive capacity, but it’s needed to complete the process). Set up the volume, attach it to your droplet, and `configure its mount point <https://www.digitalocean.com/docs/volumes/how-to/mount/>`__ (in this example we’re setting it to ``/mnt/odmdata/``)."
msgstr ""

#: ../../tutorials.rst:306
# 64b0db6773ee406789fb45cc17871430
msgid "Prep data and project"
msgstr ""

#: ../../tutorials.rst:308
# a73af720bd044e7191ffeb3a1d6867cb
msgid "Now push your images onto the server. You can use `Secure Copy (scp) <https://en.wikipedia.org/wiki/Secure_copy>`__ like so: ``scp -r /path/to/my/imagefolder odm@xxx.xxx.xxx.xxx:/mnt/odmdata/``."
msgstr ""

#: ../../tutorials.rst:312
# 6159f78889a940f69a0bd06f83289151
msgid "This pushes the entire folder full of images (that’s what the ``-r`` option does, “recursive”) into the remote location (in our example, into the volume we attached to the cloud machine at ``/mnt/odmdata/``."
msgstr ""

#: ../../tutorials.rst:316
# 8327bec41a35499ebdeb2706faeb14f1
msgid "This will take some bandwidth. No way around the size of the files.\\ `1 <#footnote1>`__, \\ `2 <#footnote2>`__\\"
msgstr ""

#: ../../tutorials.rst:320
# 50440b37a40443f6b0ccd6025c74754e
msgid "Directory structure"
msgstr ""

#: ../../tutorials.rst:322
# a4e8077b71884d2a8f6f1bdaa3869e38
msgid "ODM requires the directories on the machine to be set up just so. The critical bits are the install folder (if you installed as above, it’s ``/home/odm/ODM/``) and the project folder (i.e. ``/mnt/odmdata/myproject/``)"
msgstr ""

#: ../../tutorials.rst:327
# 172a34f418fe405aafaf56a2a4c671ec
msgid "ODM’s settings.yaml file specifies a single parent directory containing all projects. This is what goes in the project path line of the settings.yaml file (slightly confusingly, this is actually the *parent* directory of the individual project directories, which are specified by the project name parameter when calling ODM). Edit settings.yaml and set the project_path parameter to (as per our example setup) ``/mnt/odmdata/``, which in this case points to the Volume we created. Individual project directories are created within that."
msgstr ""

#: ../../tutorials.rst:336
# 56451d5f39c54145aed63ff3ccbb9398
msgid "Individual project directories, i.e. ``/mnt/odmdata/myproject/`` contain the gcp_list.txt file, the image_groups.txt file, and the images folder for each project``\\`"
msgstr ""

#: ../../tutorials.rst:339
# 2793395243e14809af4c944e154c2db2
msgid "The images folder, i.e. ``/mnt/odmdata/myproject/images/`` contains all of the images. If you set it up like this, the images don’t get re-copied because they’re already in the directory that ODM wants them in."
msgstr ""

#: ../../tutorials.rst:343
# 38524776d7094366898d9d5d9179f415
msgid "If you’ve got images with GPS info on them (as from an Ebee), use exiftool to massage the GPS information ``exiftool \"-GPSDOP<GPSZAccuracy\" .``.\\ `3 <#footnote3>`__\\  To do so you’ll need to install exiftool. The command for that is probably ``sudo apt install libimage-exiftool-perl``."
msgstr ""

#: ../../tutorials.rst:348
# 72985450cf8b4699a595eb2def6da7a7
msgid "Modify settings.yaml to specify the parent directory of the project folder (in this case the Volume we created, ``/mnt/odmdata/``). Make sure the images are in the correct spot, i.e. ``/mnt/odmdata/myproject/images`` and the other ancillary files (gcp_list.txt and image_groups.txt) are in the root folder ``/mnt/odmdata/myproject/``"
msgstr ""

#: ../../tutorials.rst:354
# 5d32b5b173d941c6bc09c968ee5ce103
msgid "if you have the images in separate folders for individual AOI blocks or flights (which you will if your flight management was organized), you can create an image_groups.txt file with the incantations ``for i in *; do cd $i; for j in *; do echo \"$j $i\" >> ../$i.txt; done; cd ../; done;`` and ``cd ../``, ``for i in myproject/*.txt; do cat $i >> image_groups.txt; done;``. That should create a file with the correct structure: a list of all image files and a “group name” after each one (which in this case will simply be the name of the folder it came from). Then move all of the image files into a single directory called images in the project root dir (so ``/mnt/odmdata/myproject/images/``). The image_groups.txt file will allow ODM to keep track of which images belong to the same batch, even though they’re all in a single directory."
msgstr ""

#: ../../tutorials.rst:370
# 87626843526d49d3b40b847a4c034b71
msgid "Resize droplet, pull pin, run away"
msgstr ""

#: ../../tutorials.rst:372
# e193d3924c414806878280c3200b2ce7
msgid "Shut down and resize your machine to an appropriately monstrous number of CPUs and amount of memory. I use the memory-optimized machine with 24 dedicated vCPUs and 192GB of RAM (which costs about $1.60/hr—which adds up fast, it’s over $1000/month). Restart, and get to work quickly so as not to waste expensive big-droplet time."
msgstr ""

#: ../../tutorials.rst:377
# b2c2a6c9703e45e9930ccf52a8518457
msgid "Launch the ODM process via ssh using nohup (so that if you’re cut off, processing will continue)"
msgstr ""

#: ../../tutorials.rst:380
# bfe0a1a8d0a84fe38f310ef05cb38db0
msgid "Alternately you can use GNU screen to launch the process from a screen session which won’t stop if your connection is interrupted; launch ``screen``, and use ``<ctrl> a <ctrl> d`` to detach, ``screen -r`` to re-attach. But using screen won’t get you a log file of all of the console output unless you do something specific to capture that, while nohup gives you a file with all of the console output, including error messages, for free."
msgstr ""

#: ../../tutorials.rst:387
# c6ba5ecdb35547ddbedf38c7681bf60c
msgid "Note: as of 2020-03 the normal incantation ``python run.py -i /path/to/image/folder project_name`` seems *not* to work; the ``-i`` or ``--image`` parameter causes a weird error. So we drop the -i parameter, and rely on the project directory line in the settings.yaml file to direct ODM to the right place. Now using (including a split-merge):"
msgstr ""

#: ../../tutorials.rst:398
# a1e4e8745cde4786aad01b72b975679f
msgid "This points ODM at the folder (in this example) ``/mnt/odmdata/myproject/``. Provided the image_groups.txt and gcp_list.txt are in this folder, the images are in ``/mnt/odmdata/myproject/images/``, and the project path in settings.yaml is ``/mnt/odmdata/`` it will not waste time and space copying images."
msgstr ""

#: ../../tutorials.rst:405
# c392407329184696882379bd0a4f9a57
msgid "Note that this assumes you have an image_groups.txt file. If not, this ``-split-overlap 0`` will probably fuck things up, and the ``--split 1`` is literally a random number that will be ignored after the image_groups.txt file is loaded (I think it normally controls how many groups it splits a set of images into, but in our case we’re assuming the images are already grouped sensibly). If you don’t have a large dataset (>1000 images), omit the ``--split`` and ``--split-overlap`` options."
msgstr ""

#: ../../tutorials.rst:414
# f466c3ea9e7545a5b822050dc454d6bf
msgid "Follow the progress using tail (so that you’ll know when it’s done)"
msgstr ""

#: ../../tutorials.rst:420
# fa734836b9cd4a36abfabcb82c3b8830
msgid "You may want to keep an eye on htop (to get a sense of the resource usage so that in future you can only spin up a machine as large as necessary)"
msgstr ""

#: ../../tutorials.rst:425
# affa836cc77c4d59a43010c5301a26c8
msgid "After it finishes (assuming you survive that long)"
msgstr ""

#: ../../tutorials.rst:427
# bcb61b7d4d0c4a1bbaad8764f5449885
msgid "As soon as processing is done, shut down the machine and resize it back down to the inexpensive minimum capacity."
msgstr ""

#: ../../tutorials.rst:429
# e79c28835c934105b25ad54271278314
msgid "Start the machine back up, and log in via ssh."
msgstr ""

#: ../../tutorials.rst:430
# 3c1e7b39260e4e9c857e9f03b86c99e3
msgid "If you want to save download bandwidth, you can compress the orthophoto using GDAL. Don’t add overviews, do that on your local machine to avoid making the file bigger before downloading it."
msgstr ""

#: ../../tutorials.rst:438
# 15065b6e5563441b9cdebc2be1b4cbc5
msgid "Download using scp: ``scp odm@xxx.xxx.xxx.xxx:/mnt/odmdata/myproject/odm_orthophoto/odm_orthophoto.tif`` (or grab the compressed version you created in the last step)"
msgstr ""

#: ../../tutorials.rst:442
# add03fc205984cc29461bdee3751ca8c
msgid "Once you get the file on your local computer, you can use QGIS to add overviews (“pyramids”) or use the GDAL command ``gdaladdo -r average /path/to/image.tif 2 4 8 16 32 64 128 256 512 1024``."
msgstr ""

#: ../../tutorials.rst:446
# bdd2a009e03f4183a932f0002230b0e6
msgid "You can archive the odm_texturing, odm_georeferencing, and odm-dem folders using tar to make them easier to download in one piece (and maybe smaller)."
msgstr ""

